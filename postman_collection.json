{
  "info": {
    "name": "VPG Technical Assessment API",
    "description": "API collection for the VPG Technical Assessment mobile quiz application",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Root",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/",
          "host": ["{{baseUrl}}"],
          "path": [""]
        }
      }
    },
    {
      "name": "Health Check",
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/health",
          "host": ["{{baseUrl}}"],
          "path": ["api", "health"]
        }
      }
    },
    {
      "name": "Get Auth Token",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 201\", function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "pm.test(\"Response has token and user_name\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('token');",
              "    pm.expect(jsonData).to.have.property('user_name');",
              "});",
              "pm.test(\"Token is a valid UUID\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.token).to.match(/^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i);",
              "});",
              "if (pm.response.code === 201) {",
              "    pm.collectionVariables.set(\"authToken\", pm.response.json().token);",
              "}"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"user_name\": \"test_user\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/get_auth_token",
          "host": ["{{baseUrl}}"],
          "path": ["api", "get_auth_token"]
        }
      }
    },
    {
      "name": "Get Auth Token - Missing Username",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 400\", function () {",
              "    pm.response.to.have.status(400);",
              "});",
              "pm.test(\"Error message is correct\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.error).to.equal('user_name is required');",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/get_auth_token",
          "host": ["{{baseUrl}}"],
          "path": ["api", "get_auth_token"]
        }
      }
    },
    {
      "name": "Get Questions",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "pm.test(\"Response is an array\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.be.an('array');",
              "});",
              "pm.test(\"Questions have required format\", function () {",
              "    var jsonData = pm.response.json();",
              "    if (jsonData.length > 0) {",
              "        pm.expect(jsonData[0]).to.have.property('Question');",
              "        pm.expect(jsonData[0]).to.have.property('Responses');",
              "        pm.expect(jsonData[0].Responses).to.be.an('array');",
              "    }",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/questions/{{authToken}}",
          "host": ["{{baseUrl}}"],
          "path": ["api", "questions", "{{authToken}}"]
        }
      }
    },
    {
      "name": "Get Questions - Invalid Token",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 401\", function () {",
              "    pm.response.to.have.status(401);",
              "});",
              "pm.test(\"Error message is correct\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.error).to.equal('Invalid token');",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/questions/invalid-token",
          "host": ["{{baseUrl}}"],
          "path": ["api", "questions", "invalid-token"]
        }
      }
    },
    {
      "name": "Save Response",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 201\", function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "pm.test(\"Response has required fields\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('id');",
              "    pm.expect(jsonData).to.have.property('user_name');",
              "    pm.expect(jsonData).to.have.property('question_index');",
              "    pm.expect(jsonData).to.have.property('response');",
              "    pm.expect(jsonData).to.have.property('created_at');",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n    \"question_index\": 0,\n    \"response\": \"Without any difficulty\"\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/responses/{{authToken}}",
          "host": ["{{baseUrl}}"],
          "path": ["api", "responses", "{{authToken}}"]
        }
      }
    },
    {
      "name": "Save Response - Missing Fields",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 400\", function () {",
              "    pm.response.to.have.status(400);",
              "});",
              "pm.test(\"Error message is correct\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.error).to.equal('Missing required fields');",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{}"
        },
        "url": {
          "raw": "{{baseUrl}}/api/responses/{{authToken}}",
          "host": ["{{baseUrl}}"],
          "path": ["api", "responses", "{{authToken}}"]
        }
      }
    },
    {
      "name": "Get User Responses",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "pm.test(\"Response is an array\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.be.an('array');",
              "});",
              "pm.test(\"Responses have required fields\", function () {",
              "    var jsonData = pm.response.json();",
              "    if (jsonData.length > 0) {",
              "        pm.expect(jsonData[0]).to.have.property('id');",
              "        pm.expect(jsonData[0]).to.have.property('user_name');",
              "        pm.expect(jsonData[0]).to.have.property('question_index');",
              "        pm.expect(jsonData[0]).to.have.property('response');",
              "        pm.expect(jsonData[0]).to.have.property('created_at');",
              "    }",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/responses/{{authToken}}/test_user",
          "host": ["{{baseUrl}}"],
          "path": ["api", "responses", "{{authToken}}", "test_user"]
        }
      }
    },
    {
      "name": "Get Progress",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 200\", function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "pm.test(\"Response has required fields\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData).to.have.property('total_questions');",
              "    pm.expect(jsonData).to.have.property('answered_questions');",
              "    pm.expect(jsonData).to.have.property('progress');",
              "});",
              "pm.test(\"Progress is a valid percentage\", function () {",
              "    var jsonData = pm.response.json();",
              "    pm.expect(jsonData.progress).to.be.within(0, 1);",
              "    pm.expect(jsonData.progress).to.equal(",
              "        jsonData.answered_questions / jsonData.total_questions",
              "    );",
              "});"
            ]
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/api/progress/{{authToken}}",
          "host": ["{{baseUrl}}"],
          "path": ["api", "progress", "{{authToken}}"]
        }
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "https://vpg-tech-assessment-agg9exckazhhawdr.eastus-01.azurewebsites.net"
    },
    {
      "key": "authToken",
      "value": ""
    }
  ]
}
